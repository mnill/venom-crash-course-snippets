pragma ever-solidity >= 0.64.0;

import "./interfaces/ITokenWallet.tsol";
import "./interfaces/ITokenRoot.tsol";
import "./interfaces/IAcceptTokensTransferCallback.tsol";
import "./interfaces/IAcceptTokensMintCallback.tsol";

import "./libraries/Errors.tsol";
import "./libraries/TokenGas.tsol";
import "./libraries/TokenMsgFlag.tsol";


contract TokenWallet is ITokenWallet {

  address static root_;
  address static owner_;

  uint128 balance_;

  constructor() public {
    require(tvm.pubkey() == 0, Errors.NON_ZERO_PUBLIC_KEY);
    require(owner_.value != 0, Errors.WRONG_WALLET_OWNER);
  }


  modifier onlyRoot() {
    require(root_ == msg.sender, Errors.WRONG_ROOT_OWNER);
    _;
  }

  modifier onlyOwner() {
    require(owner_ == msg.sender, Errors.NOT_OWNER);
    _;
  }

  function _buildWalletInitData(address walletOwner) internal view returns (TvmCell) {
    // Build TokenWallet StateInit for walletOwner
    return tvm.buildStateInit({
      contr: TokenWallet, // our contract, to guide compiler how to pack static variables
      varInit: {
        root_: root_,
        owner_: walletOwner
      },
      pubkey: 0,
      code: tvm.code() // The same code as our contract has
    });
  }


  function transfer(
      uint128 amount,
      address recipient,
      uint128 deployWalletValue,
      address remainingGasTo,
      bool notify,
      TvmCell payload
    ) override external onlyOwner
    {
      // With this method we can send tokens to any similar wallet
      // directly. When doing this we can say that we want to first
      // deploy this wallet.

      // Be aware, address recipient - is not an address of target wallet contract
      // recipient is the address of the wallet owner!
      // The same logic also in EverWallet extension.
      // When you send tokens to someone to specify the wallet owner address,
      // wallet address calculate under the hood.

      // Notify and Payload are necessary to build big decentralised applications in the
      // async blockchain. We will figure out how to use payload in the
      // "Build a decentralized application" page of this chapter

      require(amount > 0, Errors.WRONG_AMOUNT);
      require(amount <= balance_, Errors.NOT_ENOUGH_BALANCE);
      require(recipient.value != 0 && recipient != owner_, Errors.WRONG_RECIPIENT);

      // We always reserve 0.1 ever on this contract.
      tvm.rawReserve(TokenGas.TARGET_WALLET_BALANCE, 0);

      // Build state init for target wallet
      TvmCell stateInit = _buildWalletInitData(recipient);

      address recipientWallet;

      if (deployWalletValue > 0) {
        // Deploy target wallet contract and get the address
        recipientWallet = new TokenWallet {
          stateInit: stateInit,
          value: deployWalletValue,
          wid: address(this).wid,
          flag: TokenMsgFlag.SENDER_PAYS_FEES
        }();
      } else {
        // Just calculate address
        recipientWallet = address(tvm.hash(stateInit));
      }

      // Decrease our balance
      balance_ -= amount;

      // Call acceptTransfer method of the target wallet contract
      ITokenWallet(recipientWallet).acceptTransfer{ value: 0, flag: TokenMsgFlag.ALL_NOT_RESERVED, bounce: true }
      (
        amount,
        owner_,
        remainingGasTo,
        notify,
        payload
      );
  }

  function acceptTransfer(
    uint128 amount,
    address sender,
    address remainingGasTo,
    bool notify,
    TvmCell payload
  ) override external
  {
    // Transfer accepting function. This is a very nice concept.
    // We can send tokens directly from one wallet
    // to another because in ES a contract address is a uniquely
    // computed value. We can check that the contract that is
    // calling us is the same kind of contract as ours and has the same
    // Root and code. So we know for sure if the contract calls us
    // these tokens are real and come from the contract root.

    // Check msg.sender address has the same code and the same root
    require(msg.sender == address(tvm.hash(_buildWalletInitData(sender))), Errors.SENDER_IS_NOT_VALID_WALLET);

    // We always reserve 0.1 ever on this contract.
    tvm.rawReserve(TokenGas.TARGET_WALLET_BALANCE, 0);

    balance_ += amount;

    // This part useful for building complex application with tip3
    // If notify set to true wallet will send callback with attached payload
    // to wallet's owner
    // Wallet owner can be smart contract with custom logic
    // We will cover this part in "Build a decentralized application"
    if (notify) {
      IAcceptTokensTransferCallback(owner_).onAcceptTokensTransfer{
          value: 0,
          flag: TokenMsgFlag.ALL_NOT_RESERVED + TokenMsgFlag.IGNORE_ERRORS,
          bounce: false
        } (
          root_,
          amount,
          sender,
          msg.sender,
          remainingGasTo,
          payload
        );
    } else {
      remainingGasTo.transfer({ value: 0, flag: TokenMsgFlag.ALL_NOT_RESERVED + TokenMsgFlag.IGNORE_ERRORS, bounce: false });
    }
  }

  function acceptMint(
    uint128 amount,
    address remainingGasTo,
    bool notify,
    TvmCell payload
  ) override external onlyRoot
  {
    // Just accept new tokens from the root

    // We always reserve 0.1 ever on this contract.
    tvm.rawReserve(TokenGas.TARGET_WALLET_BALANCE, 0);

    balance_ += amount;

    // Notify wallet owner about new minted tokens
    if (notify) {
      IAcceptTokensMintCallback(owner_).onAcceptTokensMint{
        value: 0,
        bounce: false,
        flag: TokenMsgFlag.ALL_NOT_RESERVED + TokenMsgFlag.IGNORE_ERRORS
      }(
        root_,
        amount,
        remainingGasTo,
        payload
      );
    } else if (remainingGasTo.value != 0 && remainingGasTo != address(this)) {
      remainingGasTo.transfer({ value: 0, flag: TokenMsgFlag.ALL_NOT_RESERVED + TokenMsgFlag.IGNORE_ERRORS, bounce: false });
    }
  }

  function owner() external override view responsible returns (address) {
    // Just responsible function to get a token wallet owner
    return { value: 0, flag: TokenMsgFlag.REMAINING_GAS, bounce: false } owner_;
  }

  function balance() override external view responsible returns (uint128) {
    return { value: 0, flag: TokenMsgFlag.REMAINING_GAS, bounce: false } balance_;
  }

  onBounce(TvmSlice body) external {
    uint32 functionId = body.decode(uint32);
    if (functionId == tvm.functionId(ITokenWallet.acceptTransfer)) {
      uint128 amount = body.decode(uint128);
      balance_ += amount;
    }
  }
}
